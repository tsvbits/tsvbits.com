{"componentChunkName":"component---src-templates-blog-post-js","path":"/json-records/","result":{"data":{"site":{"siteMetadata":{"title":"tsvbits","author":"Sergey Todyshev"}},"markdownRemark":{"id":"86dfd082-6ed8-5f5e-bfdc-7b92fecf71df","html":"<p>JSON record set is an array of objects. <a href=\"https://crates.io/crates/serde_json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">serde_json crate</a> does not provide fast solution to parse it out of the box, but you can do something I came up with. I use <a href=\"https://docs.serde.rs/serde_json/struct.StreamDeserializer.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StreamDeserializer</a> and custom handling to skip array symbols like ’[’ or ’,‘:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span>Error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> async_std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span>SeekFrom<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> byteorder<span class=\"token punctuation\">::</span>ReadBytesExt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> serde_json<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>Deserializer<span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">,</span> Value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>Read<span class=\"token punctuation\">,</span> Seek<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> Record <span class=\"token operator\">=</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Value<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> JsonRecords<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'de,</span> R<span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    R<span class=\"token punctuation\">:</span> Read <span class=\"token operator\">+</span> Seek<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    reader<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'de</span> <span class=\"token keyword\">mut</span> R<span class=\"token punctuation\">,</span>\n    is_array_start<span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'de,</span> R<span class=\"token operator\">></span> JsonRecords<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'de,</span> R<span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    R<span class=\"token punctuation\">:</span> Read <span class=\"token operator\">+</span> Seek<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'de</span> <span class=\"token keyword\">mut</span> R<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n            reader<span class=\"token punctuation\">,</span>\n            is_array_start<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">skip_array_start</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_char</span><span class=\"token punctuation\">(</span><span class=\"token char string\">b'['</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>is_array_start <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">skip_char</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> u8<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_ws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">read_u8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> c <span class=\"token operator\">!=</span> val <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">::</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"expect '{}', but was '{}'\"</span><span class=\"token punctuation\">,</span>\n                val<span class=\"token punctuation\">,</span> c\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">skip_ws</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">match</span> c <span class=\"token punctuation\">{</span>\n                <span class=\"token char string\">b' '</span> <span class=\"token operator\">|</span> <span class=\"token char string\">b'\\n'</span> <span class=\"token operator\">|</span> <span class=\"token char string\">b'\\r'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                _ <span class=\"token operator\">=></span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span>u8<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">read_u8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span>SeekFrom<span class=\"token punctuation\">::</span><span class=\"token function\">Current</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">read_u8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[inline]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">read_record</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Option<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span>Record<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> de <span class=\"token operator\">=</span> Deserializer<span class=\"token punctuation\">::</span><span class=\"token function\">from_reader</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> stream <span class=\"token operator\">=</span> de<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">match</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            None <span class=\"token operator\">=></span> None<span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">match</span> t <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'de,</span> R<span class=\"token operator\">></span> Iterator <span class=\"token keyword\">for</span> JsonRecords<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'de,</span> R<span class=\"token operator\">></span>\n<span class=\"token keyword\">where</span>\n    R<span class=\"token punctuation\">:</span> Read <span class=\"token operator\">+</span> Seek<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> Item <span class=\"token operator\">=</span> Result<span class=\"token operator\">&lt;</span>Record<span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Option<span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token punctuation\">::</span>Item<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>is_array_start <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_array_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_ws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">match</span> c <span class=\"token punctuation\">{</span>\n                    <span class=\"token char string\">b']'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">let</span> _ <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_ws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> None<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token char string\">b','</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">discard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip_ws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token char string\">b'{'</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">read_record</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">Some</span><span class=\"token punctuation\">(</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">::</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token function\">format!</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token string\">\"expected '{{' or ']', but got '{}'\"</span><span class=\"token punctuation\">,</span>\n                            c <span class=\"token keyword\">as</span> char\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> tests <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span>json_records<span class=\"token punctuation\">::</span>JsonRecords<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span>Error<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span>Cursor<span class=\"token punctuation\">;</span>\n\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">test_json_array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Error<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"[{\\\"a\\\": 1}, {\\\"a\\\": 2}]\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cursor <span class=\"token operator\">=</span> Cursor<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> JsonRecords<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> cursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> rec <span class=\"token keyword\">in</span> array <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> rec<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Enjoy! EOF 😄</p>","timeToRead":2,"frontmatter":{"title":"Efficient parsing of JSON record sets in Rust","date":"July 17, 2020","spoiler":"Custom iterator on top of serde_json StreamDeserializer"},"fields":{"slug":"/json-records/","langKey":"en"}}},"pageContext":{"slug":"/json-records/","previous":{"fields":{"slug":"/dataminer/","langKey":"en","directoryName":"dataminer","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Data Miner","tags":["csharp","scraping","sample"]}},"next":null,"translations":[],"translatedLinks":[]}}}